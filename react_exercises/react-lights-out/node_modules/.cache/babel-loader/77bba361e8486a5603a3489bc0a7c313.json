{"ast":null,"code":"var _jsxFileName = \"/Users/Paradiseplus/Desktop/Coding/React/React/react_exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      const boardCop = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCop);\n      flipCell(y, x - 1, boardCop);\n      flipCell(y, x + 1, boardCop);\n      flipCell(y - 1, x, boardCop);\n      flipCell(y + 1, x, boardCop);\n\n      // TODO: return the copy\n\n      return boardCop;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You're a Winner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }, this);\n  }\n  // TODO\n\n  // make table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[x][y],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","hasWon","flipCellsAround","coord","oldBoard","x","split","map","Number","flipCell","boardCopy","boardCop","row","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","push","isLit","flipCellsAroundMe","className","_c","$RefreshReg$"],"sources":["/Users/Paradiseplus/Desktop/Coding/React/React/react_exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn= 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for( let y = 0; y < nrows; y++) []\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      const boardCop = oldBoard.map(row => [...row]);\n\n\n\n\n\n      // TODO: in the copy, flip this cell and the cells around it\n     \n      flipCell(y, x, boardCop);\n      flipCell(y, x - 1, boardCop);\n      flipCell(y, x + 1, boardCop);\n      flipCell(y - 1, x, boardCop);\n      flipCell(y + 1, x, boardCop);\n      \n      // TODO: return the copy\n\n      return boardCop\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\nif (hasWon()){\n  return <div>You're a Winner</div>\n}\n  // TODO\n\n  // make table board\nlet tableBoard = [];\n\nfor (let y=0; y < nrows; y++) {\n  let row = [];\n  for (let x=0; x < ncols; x++) {\n    let coord = `${y}-${x}`;\n    row.push(\n      <Cell \n      key ={coord}\n      isLit={board[x][y]}\n      flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n    )\n  }\n  tableBoard.push(<tr key={y}>{row}</tr>)\n}\nreturn (\n  <table className=\"Board\">\n    <tbody>{tableBoard}</tbody>\n  </table>\n)\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}